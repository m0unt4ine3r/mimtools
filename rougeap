#!/bin/python

# TODO:
# redo with less shell
# - add more functions
# - use f'' or format
# - macchanger!!!
# - abstract confirmations/catch invalid input

import io
import os
import re
import sys
import time
import getopt
import curses
import subprocess

# path to user configs
# if statement?
path = '%s/.config' % os.path.expanduser('~')
#path = 'config'	# for testing git

# get ap conf
with open(f'{path}/hostapd/rouge.conf', 'r') as apconffile:
	apconf = apconffile.read()

# dns conf
#with open('{}/dnsmasq/rouge.conf'.format(path), 'r') as dnsconffile:
#	dnsconf = dnsconffile.read()

# log files
dlog = 'dnsmasq.log'
hlog = 'hostapd.log'

# default access point vars 
apdev = re.search('interface=(.*)', apconf).group(1)
apsubnet = '10.0.0.0'
apnetmask = '255.255.255.0'
apip = '10.0.0.1/24'

# ap settings 
ssid = re.search('ssid=(.*)', apconf).group(1)
chan = re.search('channel=(.*)', apconf).group(1)
enc = re.search('auth_algs=(.*)', apconf).group(1)
password = re.search('wpa_passphrase=(.*)', apconf).group(1)

# default internet device vars
codev = 'wlp3s0'
coip = subprocess.Popen("ip a | grep %s | awk 'FNR==2 {print $2}'" % codev, shell=True,
		stdout=subprocess.PIPE, universal_newlines=True).communicate()[0].strip()

# all detected devices
devices = subprocess.Popen("ip a | grep \^\[0-9\] | awk '{print $2}' | cut -d':' -f1", shell=True,
		stdout=subprocess.PIPE, universal_newlines=True).communicate()[0].strip().split()

# ----------

# Curses input prompt
def cursin(stdscr, prompt):
	arr = []
	output = ''
	word = prompt	#rename?
	pos = size = 0
	start = x = len(prompt)

	while True:
		try:
			stdscr.addstr(word)
			stdscr.refresh()
			coords = stdscr.getyx()
			stdscr.move(coords[0], x)
			key = stdscr.getkey()

			if key == '\n':
				return output

			elif str(key) == 'KEY_BACKSPACE':
				if x > start:
					arr.pop(pos-1)
					size -= 1
					pos -= 1
					x -= 1

				else:
					pass

			elif str(key) == 'KEY_LEFT':
				if x > start:
					pos -= 1
					x -= 1

				else:
					pass

			elif str(key) == 'KEY_RIGHT':
				if x <= size+1:
					pos += 1
					x += 1

				else:
					pass

			elif ord(key) >= 32 or ord(key) <= 126:
				arr.insert(pos, key)
				size += 1
				pos += 1
				x += 1

			#else:
			# catch up/down arrows and other invalid input

			output = ''.join(arr)
			word = prompt + output
			stdscr.move(coords[0], 0)
			stdscr.clrtoeol()

		except TypeError:
			pass

		except KeyboardInterrupt:
			curses.endwin()
			print('Exiting...')
			break

# ----------

def menu(stdscr):
	# because colors are important
	curses.use_default_colors()

	while True:
		try:
			stdscr.clear()
			stdscr.addstr('[Menu splash here]\n')
			stdscr.addstr('0 - Exit\n')
			stdscr.addstr('1 - AP setup\n')
			stdscr.addstr('2 - IP setup\n')
			stdscr.addstr('3 - Start AP\n')
			selection = int(cursin(stdscr, '> '))

			if selection == 0:
				sys.exit(0)

			elif selection == 1:
				varsetup(stdscr)

			elif selection == 2:
				stdscr.addstr('Coming soon')

			elif selection == 3:
				apstart(stdscr)

			else:
				stdscr.clear()
				stdscr.addstr('Number out of range.')
				stdscr.getch()

		except ValueError:
			stdscr.clear()
			stdscr.addstr('Invalid input.')
			stdscr.getch()

		except KeyboardInterrupt:
			stdscr.clear()
			stdscr.addstr('\nExiting...')
			stdscr.getch()
			sys.exit(0)

#		except Exception as e:
#			stdscr.addstr('\nError: {}'.format(e))
#			stdscr.addstr('Exiting...')
#			sys.exit(1)

# ----------

def varsetup(stdscr):
	stdscr.clear()

	try:
		# globals
		global apdev
		global ssid
		global chan
		global enc
		global password

		while True:
			# set device to be used as ap
			defap = apdev

			while True:
				stdscr.clear()
				stdscr.addstr('Detected devices:\n')
				i = 0

				for d in devices:
					stdscr.addstr(f'{i} - {d}\n')
					i += 1

				apselect = cursin(stdscr, f'# of dev to be used as AP [{defap}]: ')
				
				try:
					if apselect:
						apselect = int(apselect)
					else:
						apselect = 0

				except ValueError:
					stdscr.clear()
					stdscr.addstr('Invalid input.')
					stdscr.getch()
					continue

				if apselect in range(i):
					if apselect and devices[apselect] != apdev:
						stdscr.clear()
						apdev = devices[apselect]
						stdscr.addstr(f'New AP dev is: {apdev}\n')
						confirm = cursin(stdscr, 'Is this correct? [y/N]: ').lower()

						if confirm == 'y':
							break

					else:
						stdscr.clear()
						confirm = cursin(stdscr, f'Leave AP dev as default ({defap})? [y/N]: ').lower()

						if confirm == 'y':
							break

				else:
					stdscr.clear()
					stdscr.addstr('Not a valid selection.')
					stdscr.getch()

			# set ssid
			defssid = ssid
			while True:
				stdscr.clear()
				ssidselect = cursin(stdscr, f'Enter SSID [{defssid}]: ')

				if ssidselect and ssidselect != ssid:
					ssid = ssidselect
					stdscr.clear()
					stdscr.addstr(f'New SSID is: {ssid}\n')
					confirm = cursin(stdscr, 'Is this correct? [y/N]: ').lower()

					if confirm == 'y':
						stdscr.clear()
						break

				else:
					stdscr.clear()
					confirm = cursin(stdscr, f'Leave SSID as default ({defssid})? [y/N]: ').lower()

					if confirm == 'y':
						stdscr.clear()
						break

			# set channel
			defchan = chan
			while True:
				chanselect = cursin(stdscr, f'Select a channel (1-12) [{defchan}]: ')

				if chanselect:
					# can move up a level
					try:
						chanselect = int(chanselect)

					except ValueError:
						stdscr.clear()
						stdscr.addstr('Invalid input.')
						continue

					if chanselect in range(1, 12):
						chan = chanselect
						stdscr.clear()
						stdscr.addstr(f'New channel is: {chan}\n')
						confirm = cursin(stdscr, 'Is this correct? [y/N]: ').lower()

						if confirm == 'y':
							stdscr.clear()
							break

						else:
							continue

					else:
						stdscr.clear()
						stdscr.addstr('Invalid input. Valid channels (for US) are 1-12.')
						stdscr.getch
						continue

				else:
					stdscr.clear()
					stdscr.addstr(f'Channel remains "{defchan}".')
					break
			
			# set encryption
			defenc = enc
			modes = ('open', 'wpa2', 'wep')

			while True:
				stdscr.addstr('Encryption modes:\n')
				stdscr.addstr('0 - open\n')
				stdscr.addstr('1 - wpa2\n')
				stdscr.addstr('2 - wep\n')
				encselect = cursin(stdscr, f'Select encryption type [{defenc}]: ')

				if encselect:
					# can move up a level
					try:
						encselect = int(encselect)

					except ValueError:
						stdscr.clear()
						stdscr.addstr('Invalid input.')
						continue

					if encselect in range(3):
						enc = encselect
						stdscr.clear()
						confirm = cursin(stdscr, f'New encryption type is "{modes[enc]}". Is this correct? [y/N]: ').lower()

						if confirm != 'y':
							continue

					elif not encselect:
						stdscr.clear()
						stdscr.addstr(f'Encrytption mode remains "{modes[enc]}".')
						# add confirm here

				#
				# - ADD PASSWORD
				#

				# somewhat wonky - fix
				# final confirm and commit
				stdscr.clear()
				stdscr.addstr('--Final settings--\n')
				stdscr.addstr(f'AP interface:\t\t{apdev}\n')	# fix tab alignment
				stdscr.addstr(f'SSID:\t\t\t{ssid}\n')
				stdscr.addstr(f'Channel:\t\t{chan}\n')
				stdscr.addstr(f'Encryption mode:\t{modes[int(enc)]}\n')
				finalselect = cursin(stdscr, 'Are these settings correct? [y/N]: ').lower()

				if finalselect == 'y':
					break


			stdscr.addstr('Commiting...')
			commit()
			break

	except KeyboardInterrupt:
		stdscr.addstr('\nExiting...')
		stdscr.getch()
		sys.exit(0)

	except Exception as e:
		stdscr.addstr(f'\nError: {e}\n')
		stdscr.addstr('Exiting...')
		stdscr.getch()
		sys.exit(1)

# ----------

def commit():
	global apconf
	global apdev
	global ssid
	global chan
	global enc

	# make file changes here
	apconf = re.sub('(interface=).*', '\g<1>{}'.format(apdev), apconf)
	apconf = re.sub('(ssid=).*', '\g<1>{}'.format(ssid), apconf)
	apconf = re.sub('(channel=).*', '\g<1>{}'.format(chan), apconf)
	apconf = re.sub('(auth_algs=).*', '\g<1>{}'.format(enc), apconf)

	#print(apconf)
	
	with open('{}/hostapd/rouge.conf'.format(path), 'w') as apconffile:
		apconffile.write(apconf)

# ----------

def apstart(stdscr):
	code = 0
	try:
		# Configure iface
		subprocess.run('ip link set %s down' % apdev, shell=True, check=True)
		subprocess.run('ip addr flush dev %s' % apdev, shell=True, check=True)
		subprocess.run('ip link set %s up' % apdev, shell=True, check=True)
		subprocess.run('ip addr add %s dev %s' % (apip, apdev), shell=True, check=True)

		# Set up NAT
		subprocess.run('iptreset', shell=True, check=True)
		subprocess.run('iptables -t nat -A POSTROUTING -o %s -j MASQUERADE' % codev, shell=True, check=True)
		subprocess.run('iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT', shell=True, check=True)
		subprocess.run('iptables -A FORWARD -i %s -o %s -j ACCEPT' % (apdev, codev), shell=True, check=True)
		subprocess.run('sysctl -w net.ipv4.ip_forward=1', shell=True, check=True)

		# Stop dnsmasq if started
		dnsmasq = subprocess.Popen('ps -e | grep dnsmasq', shell=True, stdout=subprocess.PIPE,
					universal_newlines=True).communicate()[0].strip()

		if dnsmasq:
			stdscr.addstr('dnsmasq already running. Kill it? [y/N]\n')
			killit = cursin('> ').lower()
		
			if killit != 'y':
				sys.exit('Exiting program')

			subprocess.run('killall dnsmasq', shell=True)

		# Start dsnmasq and hostapd
		dwriter = io.open(dlog, 'wb') 
		dreader = io.open(dlog, 'rb', 1)
		hwriter = io.open(hlog, 'wb') 
		hreader = io.open(hlog, 'rb', 1)

		with io.open(dlog, 'wb') as dwriter, io.open(hlog, 'wb') as hwriter,\
			io.open(dlog, 'rb', 1) as dreader, io.open(hlog, 'rb', 1) as hreader:
			dnsmasq = subprocess.Popen('dnsmasq -d -C %s/dnsmasq/rouge.conf' % path, shell=True,
						stdout=dwriter, universal_newlines=True)
			hostapd = subprocess.Popen('hostapd %s/hostapd/rouge.conf' % path, shell=True,
						stdout=hwriter, universal_newlines=True)

			# log output needs normalizing for curses
			while dnsmasq.poll() is None and hostapd.poll() is None:
				dout = dreader.read().decode()
				hout = hreader.read().decode().strip()

				if dout:
					stdscr.addstr(dout)

				if hout:
					stdscr.addstr(hout)

		while True:
			if hreader.read().decode():
				stdscr.addstr('From hostapd: ' + hreader.read().decode())
			if dreader.read().decode():
				stdscr.addstr('From dnsmasq: ' + dreader.read().decode())
			

	except KeyboardInterrupt:
		code = 0
		pass

	except Exception as error:
		code = 1
		stdscr.addstr('Error: {}.'.format(error))

	# Tear everything down
	stdscr.getch()
	stdscr.addstr('Stopping hostapd...\n')
	hostapd.terminate()
	stdscr.addstr('Stopping dnsmask...\n')
	dnsmasq.terminate()
	stdscr.addstr('Stopping ip forwarding...\n')
	subprocess.run('sysctl -w net.ipv4.ip_forward=0', shell=True, check=True)
	stdscr.addstr('Resetting iptables...\n')
	subprocess.run('iptreset', shell=True, check=True)
	stdscr.addstr('Removing log files...')
	os.remove(hlog)
	os.remove(dlog)
	sys.exit(code)

# ----------

if __name__ == '__main__':
	if os.getuid() != 0:	# needs to be changed to only get root when needed and drop back to userland
		print('This script needs root.')
		os.execvp('sudo', ['sudo', '-E'] + sys.argv)

	curses.wrapper(menu)
#	varsetup()
#	apsetup()
